* TODO Process all the imported modules recursively
* TODO To prevent non-desirable evaluation

From Peter's email:

Another important thing might be to use the "abstract" construct in
Agda to prevent non-desirable evaluation. For example, the definition
of And is done in terms of Sigma in the standard library. This is not
good for translation, because we want to translate And in Agda into
And in predicate logic. If And in Agda is translated into Sigma during
normalizationk, then this won't happen.

See Agda patch: don't inline definitions for COMPILED functions

* TODO TPTP definitions

It is possible to translate predicates inside conjectures?

(see file Test.Fail.UsingPredicatesWithConjectures)

From an Peter's email:

You should postulate

forall i. i + zero ≡ i

because this is one of the recursion equations, and this should be
enough. There must be a way to add definitions like

P i = zero + i ≡ i

in Equinox. Maybe it's simply by adding a postulate

forall i. P i <=> zero + i ≡ i

or it could also be that there is a special command for "macros". You
should not need to add special cases like P zero separately.


From an Peter's email:

It ought to be more efficient to add a definition as a "macro"
(abbreviation) then as an equivalence axiom. A macro would be expanded
immediately, whereas an equivalence axiom may be treated
differently. This must be a very common problem for people who use
ATP, and there is probably a standard solution.
