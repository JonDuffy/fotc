* About the second paper
** To comment/add
*** The handling of ATP stuff inside where clauses
**** The problems
**** This facilitate writing the ATP axioms. e.g.
LTC.Examples.GCD.Extra.S≤0-elim : {A : Set}{d : D} → succ d ≤ zero → A
*** The difference between predicates' definitions and functions' definitions
From Agda internal representation of clauses, both definitions are
equal, the only difference is in the type of the symbol.
*** Martin-Löf cite
From Peter:
Just a note. In one of Per Martin-Löf's first papers on
type theory he explicitly writes down translations of a number of well
known theories into type theory, including a translation of first
order intuitionistic predicate logic using Curry-Howard. This might
actually be useful to look at, and to cite.
* Others
** Using reflection.
From Ulf comments in AIMX
(http://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.AIMX)

<Ulf: magic function Set → FOL is hopeless. reflection is so much
better>

