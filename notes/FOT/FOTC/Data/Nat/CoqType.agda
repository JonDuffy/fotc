------------------------------------------------------------------------------
-- Induction principle for N.
------------------------------------------------------------------------------

{-# OPTIONS --no-universe-polymorphism #-}
{-# OPTIONS --without-K #-}

module FOT.FOTC.Data.Nat.CoqType where

open import FOTC.Base

------------------------------------------------------------------------------

data N : D → Set where
  nzero : N zero
  nsucc : ∀ {n} → N n → N (succ₁ n)

N-ind : (A : D → Set) →
        A zero →
        (∀ {n} → A n → A (succ₁ n)) →
        ∀ {n} → N n → A n
N-ind A A0 h nzero      = A0
N-ind A A0 h (nsucc Nn) = h (N-ind A A0 h Nn)

-- Induction principle generated by Coq when we define the data type N
-- in Prop.
--
-- Note that we are using an extra hypothesis @N n@ in the inductive
-- step.
Prop-ind : (A : D → Set) →
           A zero →
           (∀ {n} → N n → A n → A (succ₁ n)) →
           ∀ {n} → N n → A n
Prop-ind A A0 h nzero      = A0
Prop-ind A A0 h (nsucc Nn) = h Nn (Prop-ind A A0 h Nn)

-- Induction principle generated by Coq when we define the data type N
-- in Set.
Set-ind : (A : {n : D} → N n → Set) →
          A nzero →
          (∀ {n} → (Nn : N n) → A Nn → A (nsucc Nn)) →
          ∀ {n} → (Nn : N n) → A Nn
Set-ind A A0 h nzero      = A0
Set-ind A A0 h (nsucc Nn) = h Nn (Set-ind A A0 h Nn)
